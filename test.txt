In Unix-like operating systems, signals are a way for processes to receive asynchronous notifications from the operating system or other processes. They can be used to handle various events like interrupts, exceptions, and termination requests. Two important functions related to signal handling in C are `signal` and `sigaction`.

### `signal` Function

The `signal` function sets up a signal handler for a specified signal.

#### Syntax
```c
void (*signal(int signum, void (*handler)(int)))(int);
```

#### Parameters
- `signum`: The signal number (e.g., `SIGINT`, `SIGTERM`) that you want to handle.
- `handler`: A pointer to the signal handling function that takes an integer (the signal number) as its argument.

#### Example
```c
#include <signal.h>
#include <stdio.h>

void handle_sigint(int sig) {
    printf("Caught signal %d\n", sig);
}

int main() {
    signal(SIGINT, handle_sigint);
    while (1) {
        // Loop indefinitely, waiting for signals
    }
    return 0;
}
```

In this example, the `handle_sigint` function will be called whenever the `SIGINT` signal (usually generated by pressing Ctrl+C) is received.

### `sigaction` Function

The `sigaction` function is a more powerful and flexible way to handle signals compared to `signal`. It allows you to specify additional options and retrieve the old signal handler.

#### Syntax
```c
int sigaction(int signum, const struct sigaction *act, struct sigaction *oldact);
```

#### Parameters
- `signum`: The signal number.
- `act`: A pointer to a `struct sigaction` that specifies the new action for the signal.
- `oldact`: A pointer to a `struct sigaction` where the old action will be stored (can be NULL if you don't need the old action).

#### `struct sigaction`
```c
struct sigaction {
    void (*sa_handler)(int);      // Pointer to signal handling function
    void (*sa_sigaction)(int, siginfo_t *, void *); // Pointer to signal handling function for SA_SIGINFO
    sigset_t sa_mask;             // Signals to block during handler execution
    int sa_flags;                 // Flags to modify behavior
    void (*sa_restorer)(void);    // Unused, should be set to NULL
};
```

#### Example
```c
#include <signal.h>
#include <stdio.h>
#include <string.h>

void handle_sigint(int sig) {
    printf("Caught signal %d\n", sig);
}

int main() {
    struct sigaction sa;
    memset(&sa, 0, sizeof(sa));
    sa.sa_handler = handle_sigint;
    sa.sa_flags = 0; // Additional options, e.g., SA_RESTART

    sigaction(SIGINT, &sa, NULL);
    
    while (1) {
        // Loop indefinitely, waiting for signals
    }
    return 0;
}
```

In this example, the `sigaction` function is used to set up the `handle_sigint` function as the handler for the `SIGINT` signal. The `sa_flags` field can be used to specify additional behavior, such as automatically restarting interrupted system calls (`SA_RESTART`).

### Summary
- **`signal`**: A simpler way to set up a signal handler, but less flexible and potentially less reliable.
- **`sigaction`**: A more robust and flexible way to handle signals, with options for specifying additional behavior and retrieving the old signal handler. 

Both functions are used to define how a process should react when it receives a particular signal, allowing the program to handle interrupts, exceptions, and other asynchronous events gracefully.